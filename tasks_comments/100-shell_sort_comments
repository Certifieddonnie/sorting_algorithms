#include "sort.h"

void shell_sort(int *array, size_t size)
{
	size_t interval, inner, outer;
	int temp;

	/* Initial value of interval() is set to 1. */
	interval = 1;
	/*Sub list the whole array into 3 parts*/
	while (interval < size / 3) //3
	{
		/*Knuth's Formula*/
		interval = interval * 3 + 1; //interval is equal 4
	}

	while (interval > 0) //4 > 0
	{
		/*The For loop runs 6 times using the knuth's formula.*/
		for (outer = interval; outer < size; outer++)//outer = 4; 4 < 10; 
		{
			temp = array[outer];//13
			inner = outer;//inner is equal 4

			while (inner > interval - 1 && array[inner - interval] >= temp)//4 > 3 && array[0] >= 13;
			{
				array[inner] = array[inner - interval];//swapped position.
				inner = inner - interval;//inner = 0
			}

			array[inner] = temp;//saved the temp value in the empty position.
		}
		interval = (interval - 1) / 3;
		print_array(array, size);
		/*After the first running of the loop using the knuth's formula, we continue with insertion sort.*/
	}
}
/**
 * Following is the pseudocode for shell sort.
 * 
 * procedure shellSort()
 *	A : array of items 
 * 	
 *	/* calculate interval*
 *	while interval < A.length /3 do:
 *	   interval = interval * 3 + 1		
 *	end while
 *	
 *	while interval > 0 do:
 * 
 *	   for outer = interval; outer < A.length; outer ++ do:
 * 
 *	   /* select value to be inserted *
 *	   valueToInsert = A[outer]
 *	   inner = outer;
 * 
 *		  /*shift element towards right*
 *		  while inner > interval -1 && A[inner - interval] >= valueToInsert do:
 *			 A[inner] = A[inner - interval]
 *			 inner = inner - interval
 *		  end while
 * 
 *	   /* insert the number at hole position *
 *	   A[inner] = valueToInsert
 * 
 *	   end for
 * 
 *	/* calculate interval*
 *	interval = (interval -1) /3;	  
 * 
 *	end while
 *	
 * end procedure
 */