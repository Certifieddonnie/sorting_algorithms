#include "sort.h"
/**
 * This func would help us find the maximum value in an array*/
int find_max(int *array, int size)
{
	/*define vars
	max {to store the maximum val}
	i for iteration
	*/
	int max, i;

	/*loop through the given array*/
	for (max = array[0], i = 1; i < size; i++)
	{
		/*if the current value is greater than the maximum, swap*/
		if (array[i] > max)
			max = array[i];
	}
	return (max);
}

void counting_sort(int *array, size_t size)
{
	int *count, *sorted, max, i;
	/*check for empty or 1-element arrays*/
	if (array == NULL || size < 2)
		return;
	/**
	 * allocate mem space of equal size to inputed array
	 * This is where we'd store the values after sorting */
	sorted = malloc(sizeof(int) * size);
	/*if mem allocation faills*/
	if (sorted == NULL)
		return;
	/*call our max function to return the highest item in the array*/
	max = find_max(array, size);
	/**
	 * allocate mem space of max +1 to house all the elements
	 * i.e. if array = {1,3,5,1,4,3,10} max == 10
	 * size of count would be equivalent to that of 11(ints)
	 * Reason: we allocate spaces for both present and missing
	 * items of the list. So our array
	 * index   0| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10|
	 * count = 0| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
	 */
	count = malloc(sizeof(int) * (max + 1));
	if (count == NULL)
	{
		free(sorted);
		return;
	}
	/**since we are not allowed to use calloc
	 * this loop initializes all values of the elemnents to 0 first*/
	for (i = 0; i < (max + 1); i++)
		count[i] = 0;
	/*type casting (int)size is done to avoid "error: comparison of integer expressions of different signedness: ‘int’ and ‘size_t’ {aka ‘long unsigned int’} [-Werror=sign-compare]"*/
	for (i = 0; i < (int)size; i++)
		/**
		 * count each element and store its frequency in its
		 * index in count array e.g. if 2 appears 4 times;
		 * index   0| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10|
		 * count = 0| 0 | 4 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
		 */
		count[array[i]] += 1;

	/**readjust the count array to hold incremental values
	 * starting from the very begining
	 * e.g. if 0 appears 2ce 1 appears 5 times and 2 appears 4 times
	 * index   0| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10|
	 * count = 2| 7 |11 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
	 * 0 is 2;
	 * 1 is 2{from 0} + 5 = 7
	 * 2 is 7 + 4 = 11
	 */
	for (i = 0; i < (max + 1); i++)
		count[i] += count[i - 1];
	print_array(count, max + 1);

	for (i = 0; i < (int)size; i++)
	{
		/** array[i] = value at i-th index of the initial array
		 * count[array[i]] = count's element at index gotten from array[i]
		 * for sortedcount[array[i]] u get the gist ##LOL
		 */
		sorted[count[array[i]] - 1] = array[i];
		count[array[i]] -= 1;
	}
	/*copy the elements in sorted array back to the initial array*/
	for (i = 0; i < (int)size; i++)
		array[i] = sorted[i];

	free(sorted);
	free(count);
}
